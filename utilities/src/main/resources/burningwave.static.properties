background-executor.all-tasks-monitoring.enabled=\
    true
background-executor.all-tasks-monitoring.interval=\
    30000
background-executor.all-tasks-monitoring.logger.enabled=\
    false
background-executor.all-tasks-monitoring.minimum-elapsed-time-to-consider-a-task-as-probable-dead-locked=\
    300000
#Other possible values are: 'mark as probable dead locked',
#'interrupt', 'kill'. It is also possible to combine these values, e.g.:
#background-executor.all-tasks-monitoring.probable-dead-locked-tasks-handling.policy=\
#    mark as probable dead locked, kill
background-executor.all-tasks-monitoring.probable-dead-locked-tasks-handling.policy=\
    log only
background-executor.queued-task-executor[0].name=\
    Low priority tasks
background-executor.queued-task-executor[0].priority=\
    1
background-executor.queued-task-executor[1].name=\
    Normal priority tasks
background-executor.queued-task-executor[1].priority=\
    5
background-executor.queued-task-executor[2].name=\
    High priority tasks
background-executor.queued-task-executor[2].priority=\
    10
background-executor.task-creation-tracking.enabled=\
    ${background-executor.all-tasks-monitoring.enabled}
banner.additonal-informations=\
    ${Implementation-Title} ${Implementation-Version}
banner.additonal-informations.retrieve-from-manifest-file-with-implementation-title=\
    Burningwave Core
banner.hide=\
    true
banner.file=\
    org/burningwave/banner.bwb
buffer-handler.default-buffer-size=\
    1024
buffer-handler.default-allocation-mode=\
    ByteBuffer::allocateDirect
group-name-for-named-elements=\
    Burningwave
iterable-object-helper.default-values-separator=\
    ;
iterable-object-helper.parallel-iteration.applicability.default-minimum-collection-size=\
    2
iterable-object-helper.parallel-iteration.applicability.max-runtime-thread-count-threshold=\
    autodetect
iterable-object-helper.parallel-iteration.applicability.output-collection-enabled-types=\
    java.util.concurrent.ConcurrentHashMap$CollectionView;\
    java.util.Collections$SynchronizedCollection;\
    java.util.concurrent.CopyOnWriteArrayList;\
    java.util.concurrent.CopyOnWriteArraySet;\
    java.util.concurrent.BlockingQueue;\
    java.util.concurrent.ConcurrentSkipListSet;\
    java.util.concurrent.ConcurrentSkipListMap$EntrySet;\
    java.util.concurrent.ConcurrentSkipListMap$KeySet;\
    java.util.concurrent.ConcurrentSkipListMap$Values;
#This property is optional and it is possible to use a custom JVM Driver which implements
#the io.github.toolfactory.jvm.Driver interface.
#Other possible values are: io.github.toolfactory.jvm.DefaultDriver, 
#org.burningwave.jvm.HybridDriver, org.burningwave.jvm.NativeDriver
jvm.driver.type=\
    org.burningwave.jvm.DynamicDriver
jvm.driver.init=\
    false
#With this value the library will search if org.slf4j.Logger is present and, in this case,
#the SLF4JManagedLoggerRepository will be instantiated, otherwise
#the SimpleManagedLoggerRepository will be instantiated
managed-logger.repository=\
    autodetect
#to increase performance set it to false
managed-logger.repository.enabled=\
    false
managed-logger.repository.logging.warn.disabled-for=\
    org.burningwave.core.assembler.ComponentContainer$ClassLoader;\
    org.burningwave.core.classes.MemoryClassLoader;\
    org.burningwave.core.classes.PathScannerClassLoader;
modules.export-all-to-all=\
    true
#mandatory if more burningwave.static.properties file are in the class paths
priority-of-this-configuration=0
resource-releaser.enabled=true
synchronizer.all-threads-monitoring.enabled=\
    false
synchronizer.all-threads-monitoring.interval=\
    90000
thread-supplier.default-daemon-flag-value=\
    true
thread-supplier.default-thread-priority=\
    5
thread-supplier.max-detached-thread-count=\
    ${thread-supplier.max-poolable-thread-count}
thread-supplier.max-detached-thread-count.elapsed-time-threshold-from-last-increase-for-gradual-decreasing-to-initial-value=\
    30000
thread-supplier.max-detached-thread-count.increasing-step=\
    autodetect
thread-supplier.max-poolable-thread-count=\
    autodetect
thread-supplier.poolable-thread-request-timeout=\
    6000